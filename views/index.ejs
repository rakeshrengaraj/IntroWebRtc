<!DOCTYPE html>
<html>

<head>
    <title>Introduction to WebRTC</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    </link>
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>

    <!-- Video Tag auto Play -->
    <!-- Added Id to separate two video tags -->
    <div>
        <video id="myVideo" autoplay></video> <!-- Added Id to separate two video tags -->
        <video id="theirVideo" autoplay></video>
    </div>
    <!-- Added Id to separate two video tags -->
    <!-- Video Tag auto Play -->

    <br>
    <!-- For Messaging Input Element to Add a name and display it on a output  -->
    <div>
        <label>Your Name </label><input type="text" id="myName">
        <label>Message </label><input type="text" id="myMessage">
        <input type="submit" id="sendMessage">
        <div id="chatArea">Message Output:<br></div>
        <hr>
        <div id="signalingArea">Signaling Message:<br></div> <!-- Added Signaling Area to show messages -->
    </div>
    <!-- For Messaging Input Element to Add a name and display it on a output  -->



    <!-- The output of the image captured -->
    <script>

        // Selecting the video tag
        var myVideoArea = document.querySelector('#myVideo');  // Changed the query Selector for my video tag
        var theirVideoArea = document.querySelector('#theirVideo'); // Added the query Selector for thier video tag



        // For Messaging  Selecting the input element in a variable
        var myName = document.querySelector('#myName');
        var myMessage = document.querySelector('#myMessage');
        var sendMessage = document.querySelector('#sendMessage');
        var chatArea = document.querySelector('#chatArea');
        var signalingArea = document.querySelector('#signalingArea'); // Added a signaling area query selector
        var ROOM = 'chat-room';
        var SIGNAL_ROOM = 'signal-room'; //Added varibale for signaling room


        // For Broadcasting Messages across the room on ready and annouce the message to displayMessage function
        io = io.connect();
        io.emit('ready', { "chat_room": ROOM, "signal_room": SIGNAL_ROOM }); // changed the on ready to initiate two rooms

        io.on('announce', function (data) {
            displayMessage(data.message);
        })


        // Adding event Listeners to send message Button for displaying messages
        sendMessage.addEventListener('click', function (e) {
            io.emit('send', { "author": myName.value, "message": myMessage.value, "room": ROOM });
            e.preventDefault();
        }, false)


        io.on('startmessage', function (data) {
            displayMessage(data.author + ": " + data.message);
        })

        // Displaying the message on chatArea
        function displayMessage(message) {
            chatArea.innerHTML = chatArea.innerHTML + '<br>' + message;
        }


        // ####################### Signaling Functions ######################################

        // Defined a Stun Server and a variable
        var configuration = { 'iceServers': [{ urls: 'stun:stun.l.google.com:19302' }] };
        var rtcPeerConn;


        // Io Socket to emit signal route defined in server js
        io.emit('signal', { "type": "user_here", "message": "Are you ready for a call?", "room": SIGNAL_ROOM });

        // Handling the broadcast signaling message for route defined in server js
        io.on('signaling-message', function (data) {
            displaySignalMessage("Signal Received: " + data.type);

            // SetUp the RTC Peer Connection Object
            if (!rtcPeerConn) {
                startSignaling();
            }

            if (data.type != "user_here"){
                var message = JSON.parse(data.message);
                if (message.sdp){
                    rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function(){
                        // If we received an offer, we need to answer
                        if (rtcPeerConn.remoteDescription.type == 'offer'){
                            rtcPeerConn.createAnswer(sendLocalDesc, logError);
                        }
                    }, logError);
                }
                else{
                    rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
                }
            }
        })

        // Function to check whether signaling is established
        function startSignaling() {
            displaySignalMessage("Starting Signaling....");

            rtcPeerConn = new webkitRTCPeerConnection(configuration); // Initializing the RTC Peer connection

            // send any ice candidates to the other peer
            rtcPeerConn.onicecandidate = function (ev) {
                if (ev.candidate) {
                    io.emit('signal', { "type": "ice_candidate", "message": JSON.stringify({ "candidate": ev.candidate }), "room": SIGNAL_ROOM });
                    displaySignalMessage("Completed that ice candidate....")
                }
            }

            // let the "negotiationneeded" event trigger offer generation
            rtcPeerConn.onnegotiationneeded = function(){
                  displaySignalMessage("On negotiation called...");
                  rtcPeerConn.createOffer(sendLocalDesc, logError);  
            }

            // once media for a remote track arrives, show it in the remote video element
            rtcPeerConn.onaddstream = function(ev){
                displaySignalMessage("Going to add their stream");
                theirVideoArea.srcObject = ev.stream
            }

            // get a local stream, show it in a self-view and add it to be sent
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            navigator.getUserMedia({
                'audio': true,
                'video': true
            }, function(stream){
                console.log(myVideoArea)
                console.log(stream)
                displaySignalMessage("Going to display my stream ....");
                myVideoArea.srcObject = stream
                rtcPeerConn.addStream(stream);
            }, logError)
        }

        // Function to send Local description for Peer connections
        function sendLocalDesc(desc){
            rtcPeerConn.setLocalDescription(desc, function(){
                displaySignalMessage("Sending Local Description");
                io.emit('signal', { "type": "SDP", "message": JSON.stringify({ "sdp": rtcPeerConn.localDescription }), "room": SIGNAL_ROOM });

            }, logError)
        }

        // Function to display Error Message
        function logError(error){
            displaySignalMessage(error.name + ": " + error.message);
        } 

        // Function to display Signal Messages
        function displaySignalMessage(message) {
            signalingArea.innerHTML = signalingArea.innerHTML + '<br>' + message;
        }
    // ####################### Signaling Functions ######################################

    </script>

</body>

</html>